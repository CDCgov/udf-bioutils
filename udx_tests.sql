-- Convert to IS NOT DISTINCT FROM for CDH 6.0+, which shall be more accurate.
select "sort_list" as udf, sum(coalesce(outcome,"NULL") = coalesce(udx.sort_list(arg1_list,arg2_delim),"NULL")) as correct, count(*) as total_tests, sum(coalesce(outcome,"NULL") = coalesce(udx.sort_list(arg1_list,arg2_delim),"NULL")) / count(*) * 100 as percent_correct from udx.udf_sort_list;
select "sort_list_set" as udf, sum(coalesce(outcome,"NULL") = coalesce(udx.sort_list_set(arg1_list,arg2_delim_set,arg3_output_delim),"NULL")) as correct, count(*) as total_tests, sum(coalesce(outcome,"NULL") = coalesce(udx.sort_list_set(arg1_list,arg2_delim_set,arg3_output_delim),"NULL")) / count(*) * 100 as percent_correct from udx.udf_sort_list_set;
select "sort_alleles" as udf, sum(coalesce(outcome,"NULL") = coalesce(udx.sort_alleles(arg1_alleles,arg2_delim),"NULL")) as correct, count(*) as total_tests, sum(coalesce(outcome,"NULL") = coalesce(udx.sort_alleles(arg1_alleles,arg2_delim),"NULL")) / count(*) * 100 as percent_correct from udx.udf_sort_alleles;
select "to_aa (s)" as udf, sum(coalesce(outcome,"NULL") = coalesce(udx.to_aa(arg1_nucleotides),"NULL")) as correct, count(*) as total_tests, sum(coalesce(outcome,"NULL") = coalesce(udx.to_aa(arg1_nucleotides),"NULL")) / count(*) * 100 as percent_correct from udx.udf_to_aa_1;
select "to_aa (s,s,i)" as udf, sum(coalesce(outcome,"NULL") = coalesce(udx.to_aa(arg1_nucleotides,arg2_replacement,arg3_start_position),"NULL")) as correct, count(*) as total_tests, sum(coalesce(outcome,"NULL") = coalesce(udx.to_aa(arg1_nucleotides,arg2_replacement,arg3_start_position),"NULL")) / count(*) * 100 as percent_correct from udx.udf_to_aa_2;
select "reverse_complement" as udf, sum(coalesce(outcome,"NULL") = coalesce(udx.reverse_complement(arg1_nucleotides),"NULL")) as correct, count(*) as total_tests, sum(coalesce(outcome,"NULL") = coalesce(udx.reverse_complement(arg1_nucleotides),"NULL")) / count(*) * 100 as percent_correct from udx.udf_reverse_complement;
select "substr_range" as udf, sum(coalesce(outcome,"NULL") = coalesce(udx.substr_range(arg1_string,arg2_range_coords),"NULL")) as correct, count(*) as total_tests, sum(coalesce(outcome,"NULL") = coalesce(udx.substr_range(arg1_string,arg2_range_coords),"NULL")) / count(*) * 100 as percent_correct from udx.udf_substr_range;
select "mutation_list" as udf, sum(coalesce(outcome,"NULL") = coalesce(udx.mutation_list(arg1_seq,arg2_seq),"NULL")) as correct, count(*) as total_tests, sum(coalesce(outcome,"NULL") = coalesce(udx.mutation_list(arg1_seq,arg2_seq),"NULL")) / count(*) * 100 as percent_correct from udx.udf_mutation_list;
select "mutation_list_nt" as udf, sum(coalesce(outcome,"NULL") = coalesce(udx.mutation_list_nt(arg1_seq,arg2_seq),"NULL")) as correct, count(*) as total_tests, sum(coalesce(outcome,"NULL") = coalesce(udx.mutation_list_nt(arg1_seq,arg2_seq),"NULL")) / count(*) * 100 as percent_correct from udx.udf_mutation_list_nt;
select "hamming_distance (s,s)" as udf, sum(coalesce(outcome,-999) = coalesce(udx.hamming_distance(arg1_seq,arg2_seq),-999)) as correct, count(*) as total_tests, sum(coalesce(outcome,-999) = coalesce(udx.hamming_distance(arg1_seq,arg2_seq),-999)) / count(*) * 100 as percent_correct from udx.udf_hamming_distance_1;
select "hamming_distance (s,s,s)" as udf, sum(coalesce(outcome,-999) = coalesce(udx.hamming_distance(arg1_seq,arg2_seq,arg3_pairwise_deletion_set),-999)) as correct, count(*) as total_tests, sum(coalesce(outcome,-999) = coalesce(udx.hamming_distance(arg1_seq,arg2_seq,arg3_pairwise_deletion_set),-999)) / count(*) * 100 as percent_correct from udx.udf_hamming_distance_2;
select "contains_element" as udf, sum(coalesce(outcome,False) = coalesce(udx.contains_element(arg1_string,arg2_list,arg3_delim),False)) as correct, count(*) as total_tests, sum(coalesce(outcome,False) = coalesce(udx.contains_element(arg1_string,arg2_list,arg3_delim),False)) / count(*) * 100 as percent_correct from udx.udf_contains_element;
select "is_element" as udf, sum(coalesce(outcome,False) = coalesce(udx.is_element(arg1_string,arg2_list,arg3_delim),False)) as correct, count(*) as total_tests, sum(coalesce(outcome,False) = coalesce(udx.is_element(arg1_string,arg2_list,arg3_delim),False)) / count(*) * 100 as percent_correct from udx.udf_is_element;
select "contains_sym" as udf, sum(coalesce(outcome,False) = coalesce(udx.contains_sym(arg1_string,arg2_string),False)) as correct, count(*) as total_tests, sum(coalesce(outcome,False) = coalesce(udx.contains_sym(arg1_string,arg2_string),False)) / count(*) * 100 as percent_correct from udx.udf_contains_sym;
